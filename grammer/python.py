# Python 문법

### 자료형

코딩 테스트에서는 주로 정수형을 사용

* 지수표현 방식 : 1e9 = 10의 9제곱 (유효숫자e지수)

* 컴퓨터에서는 2진수 표현을 사용하기 때문에 0.6+0.3 = 0.9를 제대로 구현하지 못함.
  따라서 round()함수를 이용한다. `round(a,b)` 수 a를 b 자릿수까지 반올림
* / 연산은 결과를 실수로 저장. // 연산자 : 몫, % 연산자 : 나머지, ** 연산자 : 거듭제곱
  `a**b`는 a의 b제곱, `a**0.5`는 a의 제곱근



### List 자료형

데이터의 연속 저장이 편하고, 배열로도 사용 가능하다

* List 인덱싱 : 특정 원소에 인덱스로 접근

* List 슬라이싱 : 연속적인 위치를 갖는 원소를 가져오는 방식

* List 컴프리헨션 : 조건문과 반복문을 이용하여 간단하게 list 초기화

  ```python
  # [0,1,2,3,4,5,6,7,8,9]
  array = [i for i in range(10)]
  
  # [1,3,5,7,9,11,13,15,17,19]
  array = [i for i in range(20) if i%2 == 1]
  
  # n*m 2차원 배열
  array = [[0]*m for _ in range(n)]
  ```

* 기타 함수
  append(x) : 리스트에 원소 삽입
  sort() : 오름차순 정렬
  reverse() : 역순으로 배치
  insert(a,b) : a를 b의 index에 삽입
  count(x) : 특정한 값을 가지는 데이터의 개수를 세는데 사용
  remove(x) : 특정한 값을 가지는 원소 제거

* 리스트에서 특정 값을 가지는 원소를 모두 제거하려면

  ```python
  a = [1,2,3,4,5,5,5]
  remove_set = {3,5}
  
  result = [i for i in a if i not in remove_set]
  ```



### 문자열 자료형

작은 따옴표나 큰 따옴표로 구성 가능하고, 작은 따옴표의 경우 내부적으로 큰 따옴표를 포함할 수 있고, 그 반대의 경우도 가능하다.

`'please say "yes"'`와 같이 사용하면 please say "yes" 저장 가능

```python
# Hello World
a = "Hello"
b = "World"
a + " " + b

# StringStringString
a = "String"
a*3

# CD
a = "ABCEDF"
print(a[2:4])
```

문자열은 원소 할당을 지원하지 않음



### 튜플 자료형

튜플은 리스트와 유사하지만 한 번 선언된 값을 변경할 수 없고 대괄호 대신 소괄호를 이용해서 초기화

리스트와 유사하게 사용되지만 서로 다른 성질의 데이터를 묶어서 관리해야 할 때, 메모리를 보다 효율적으로 사용해야 할 때, 해싱의 키 값으로 사용해야 할 때 유용하다.



### 사전 자료형

`dict()` 함수로 초기화 (key와 value로 구성되어 있음)

데이터의 조회 및 수정에 있어서 O(1)의 시간을 소모

```
data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'
# {'사과':'Apple', '바나나':'Banana','코코넛':'Coconut'}
```

* 키 데이터만 뽑아서 리스트로 이용할 때는 keys()
* 값 데이터만 뽑아서 리스트로 이용할 때는 values()





### 집합 자료형

중복을 허용하지 않고 순서가 없다.

**데이터의 조회 및 수정에 있어서 O(1)의 시간을 소모**

```python
# 집합 자료형 초기화 방법 {1,2,3,4,5}
data = set([1,1,2,3,4,4,5])
data = {1,1,2,3,4,4,5}
```

합집합, 교집합, 차집합의 자료형 연산 사용 가능

사전 및 집합 자료형은 인덱싱으로 접근을 할 수 없다.



### 입출력

표준 입출력 함수

##### 입력

> input() : 한 줄의 문자열을 입력
>
> map : 리스트의 모든 원소에 각각 특정한 함수를 적용할 때 사용
>
> `list(map(int,input().spliit))` 공백 기준으로 문자를 나눠서 list로 변경
>
> `a,b,c = map(int,input().split())` 입력 개수가 정해져 있다면 다음과 같이 입력받을 수 있다.
>
> `sys.stdin.readline().rstrip()` 메소드로 입력을 최대한 빠르게 받을 수 있다.

##### 출력

> `print()`로 출력할 수 있으며 개행이 동반된다.
>
> f-string 형식으로도 출력을 사용할 수 있는데, 변수명을 기입하여 간단히 문자열과 정수를 함께 넣을 수 있습니다.
>
> `print(f"정답은 {answer}입니다.")` answer 변수를 출력할 수 있음



### 조건문

프로그램의 흐름을 제어하는 문법, 조건에 따라서 프로그램의 로직을 설정할 수 있다.

코드의 블록을 들여쓰기로 지정 (공백과 탭을 사용할 수 있으며 공백의 경우 4개의 공백 문자를 사용한다.)

* 조건문의 기본 형태 : if ~ elif ~ else

  ```python
  if 조건문 1:
  	조건문 1이 True일 때 실행되는 코드
  elif 조건문 2:
  	조건문 1에 해당하지 않고 조건문 2가 True일 때 실행되는 코드
  else:
  	조건문 1과 2 모두 만족하지 않을 때 실행되는 코드
  ```

* 비교 연산자
  X==Y : 같을 때 참
  X!=Y : 다를 때 참
  X > Y : X가 Y보다 클 때 참
  X < Y : X가 Y보다 작을 때 참
  X >= Y : X가 Y보다 크거나 같을 때 참
  X <= Y : X가 Y보다 작거나 같을 때 참

* 논리 연산자
  X and Y : X와 Y가 모두 참일 때
  X or Y : X와 Y중 하나라도 참일 때
  not X : X가 거짓일 때 참

* 기타 연산자
  x in 리스트 : 리스트 안에 x가 들어가 있을 때 참
  x not in 리스트 : 문자열 안에 x가 들어가 있지 않을 때 참

* 아무것도 처리하고 싶지 않을 때 pass 키워드를 사용 (나중에 작성할 코드)

* 한 줄인 경우 줄바꿈을 하지 않아도 간략하게 표현할 수 있다.

* 조건부 표현식은 if~else문을 한 줄에 작성할 수 있도록 해준다.
  `result = "Success" if score>=80 else "Fail"

* 조건문 안에서 수학의 부등식을 그대로 사용할 수 있다. `if x > 0 and x < 20`



### 반복문

특정한 소스코드를 반복적으로 실행하고자 할 때 사용

* 무한 루프는 끊임없이 반복되는 반복 구문을 의미한다. / 코딩 테스트에서는 구현할 일이 거의 없음

* `for 변수 in 리스트`의 형식으로 리스트, 튜플에 포함되어 있는 원소를 처음부터 방문하면서 사용 가능
* for문을 사용할 떄  range(시작 값, 끝 값 + 1) 형태로 사용한다.
  인자를 하나만 넣으면 자동으로 시작 값은 0
* continue를 사용하면 다음 반복으로 바로 건너뛸 수 있다.
* break를 사용하면 반복문을 즉시 탈출할 수 있다.



### 함수

함수란 특정한 작업을 하나의 단위로 묶어 놓은 것으로 불필요한 소스코드의 반복을 줄일 수 있다.

* 내장 함수 : 파이썬이 기본적으로 제공하는 함수

* 사용자 정의 함수 : 개발자가 직접 정의하여 사용할 수 있는 함수

* 매개변수 : 함수 내부에서 사용할 변수

* 반환 값 : 함수에서 처리 된 결과를 반환

  ``` python
  def 함수명(매개변수):
  	실행할 소스코드
  	return 반환 값
  ```

* global 키워드로 변수를 지정하면 함수에서는 지역 변수를 만들지 않고, 함수 바깥에 선언된 변수를 바로 참조

* 반환 값을 여러 개 가질 수 있음 `return add_var, subtract_var, multiply_var, divide_var`

* 람다 표현식을 이용하면 함수를 간단하게 작성할 수 있다.

  ```
  def add(a,b):
  	return a+b
  	
  print((lambda a, b: a + b)(3,7))
  ```

  

### 실전에서 유용한 표준 라이브러리

내장 함수 : 기본 입출력 함수부터 정렬 함수까지 기본적인 함수들을 제공

itertools : 파이썬에서 반복되는 형태의 데이터를 처리하기 위한 유용한 기능들을 제공

heapq : 힙 자료구조를 제공

bisect : 이진 탐색 기능을 제공

collections : 덱, 카운터 등의 유용한 자료구조를 포함

math : 필수적인 수학적 기능을 제공

